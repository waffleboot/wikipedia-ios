# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs

$:.unshift File.dirname(__FILE__)

default_platform :ios

platform :ios do
  before_all do
     # Set project for commit_version_bump, which seems to get confused by projects in other folders
     ENV['FL_BUILD_NUMBER_PROJECT'] = "Wikipedia.xcodeproj"
     ensure_git_status_clean if ENV['FL_ENSURE_CLEAN']
  end

  desc "Checks out the sha specified in the environment variables or the develop branch"
  lane :checkout do
    sha = ENV['SHA']
    if sha != nil
      puts sha
      commit = last_git_commit
      sh "git checkout #{sha}"
    end
  end

  desc "Runs linting (and eventually static analysis)"
  lane :analyze do
    xcodebuild(
      project: "Wikipedia.xcodeproj",
      scheme: "Wikipedia",
      configuration: "Debug",
      sdk: 'iphonesimulator',
      destination: 'platform=iOS Simulator,OS=9.3,name=iPhone 6',
      analyze: true
    )
  end

  desc "Runs tests on the primary platforms and configurations"
  lane :verify_test_platforms do
    verify(
     sim: 'iPhone 6s (9.3)',
     scheme: "WikipediaRTL"
    )
    verify(
     sim: 'iPhone 6s (9.3)'
    )
    verify(
     sim: 'iPhone 6s (10.3)',
     scheme: "WikipediaRTL"
    )
    verify(
     sim: 'iPhone 6s (10.3)',
    )
  end
  
  desc "Runs tests against the beta cluster to check for upstream changes."
  lane :beta_cluster_tests do
    verify(
     sim: 'iPhone 6s (10.3)',
     scheme: "Beta Cluster Tests"
    )
  end

  desc "Runs tests on select platforms for verifying pull requests"
  lane :verify_pull_request do
    verify(
     sim: 'iPad Air 2 (9.3)',
    )
    verify(
     sim: 'iPhone 6s (10.3)',
    )
  end

  desc "Runs unit tests, generates JUnit report."
  lane :verify do |options|
    scheme = options[:scheme] || 'Wikipedia'
    sim = options[:sim] || 'iPhone 6s (10.3)'
    opts = {
      :device => sim,
      :sdk => "iphonesimulator",
      :scheme =>  scheme,
      :project => 'Wikipedia.xcodeproj',
      :buildlog_path => './build',
      :output_directory => './build/reports',
      :output_style => 'basic',
      :code_coverage => true,
      :xcargs => "TRAVIS=#{ENV["TRAVIS"]}"
    }
    opts[:output_files] = "#{scheme} #{sim}.junit"
    opts[:output_types] = 'junit'
    scan(opts)
  end
  
  desc "Increment the build number"
  lane :bump_build do |options|
    app_identifer = params[:app_identifier] || "org.wikimedia.wikipedia"
    increment_build_number({
      build_number: get_latest_alpha_or_beta_build_number + 1
    })
  end

  desc "Increment the app version patch"
  lane :bump_patch do
    increment_version_number(
      bump_type: "patch"
    )
  end

  desc "Increment the app version minor"
  lane :bump_minor do
    increment_version_number(
      bump_type: "minor"
    )
  end

  desc "Increment the app version major"
  lane :bump_major do
    increment_version_number(
      bump_type: "major"
    )
  end

  desc "Add a tag for the current build number and push to repo."
  lane :tag do |options|
    prefix = options[:prefix] || "betas"
    build_number = options[:build_number] || options[:build] || get_build_number
    tag_name = "#{prefix}/#{build_number}"
    add_git_tag(tag: tag_name)
    sh "git push origin --tags"
  end

  desc "Add a tag for the current version number push to repo."
  lane :tag_release do |options|
    version = options[:version] || get_version_number
    tag_name = "releases/#{version}"
    add_git_tag(tag: tag_name)
    sh "git push origin --tags"
  end

  desc "Build the app for distibution"
  lane :build do |options|
    project_dir = ".."
    build_dir = "../build"
    
    product_name = options[:product_name] || "Wikipedia"
    project_name = options[:project] || product_name
    scheme_name = options[:scheme] || product_name
    app_see_api_key = ENV['WMF_APP_SEE_API_KEY'] || ''
    
    sh "xcodebuild -project \"#{project_dir}/#{project_name}.xcodeproj\" -scheme \"#{scheme_name}\" -archivePath \"#{build_dir}/#{product_name}.xcarchive\" WMF_APP_SEE_API_KEY=#{app_see_api_key} archive"
    sh "open \"#{build_dir}/#{product_name}.xcarchive\"" #import the build to xcode
    sh "xcodebuild -exportArchive -exportOptionsPlist ExportOptions.plist -archivePath \"#{build_dir}/#{product_name}.xcarchive\" -exportPath \"#{build_dir}\""
    #sh "zip #{build_dir}/#{product_name}.xcarchive/dSYMs/#{product_name}.app.dSYM.zip #{build_dir}/#{product_name}.xcarchive/dSYMs/#{product_name}.app.dSYM"
    #sh "mv #{build_dir}/#{product_name}.xcarchive/dSYMs/#{product_name}.app.dSYM.zip #{build_dir}/#{product_name}.app.dSYM.zip"
  end
  
  desc "updates version, builds, and pushes to TestFlight"
  lane :push_beta do |options|
    push(
      product_name: "Wikipedia",
      app_identifier: "org.wikimedia.wikipedia",
      tag_prefix: "betas",
      hockey_app_id: "5d80da08a6761e5c6456736af7ebad88",
      build: options[:build]
    )
  end
  
  desc "updates version, builds, and pushes alpha to TestFlight"
  lane :push_alpha do |options|
    push(
      product_name: "Alpha",
      app_identifier: "org.wikimedia.wikipedia.tfalpha",
      tag_prefix: "alphas",
      hockey_app_id: "2295c3698bbd0b050f257772dd2bdbb2",
      build: options[:build]
    )
  end
  
  desc "updates version, builds, and pushes beta cluster to TestFlight"
  lane :push_beta_cluster do |options|
    push(
      product_name: "Beta Cluster",
      app_identifier: "org.wikimedia.wikipedia.tfbeta",
      tag_prefix: "beta_clusters",
      hockey_app_id: "c7ab1c41a3eb4b7581a0057624730467",
      build: options[:build]
    )
  end
  
  desc "updates version, builds, and pushes beta cluster to TestFlight"
  lane :push_beta_app do |options|
    push(
      product_name: "Beta",
      app_identifier: "org.wikimedia.wikipedia.tfbeta",
      tag_prefix: "beta_app",
      hockey_app_id: "c7ab1c41a3eb4b7581a0057624730467",
      build: options[:build]
    )
  end
  
  lane :get_latest_alpha_or_beta_build_number do |options|
    latest_alpha_build_number = latest_testflight_build_number(app_identifier:  "org.wikimedia.wikipedia.tfalpha")
    latest_beta_build_number = latest_testflight_build_number(app_identifier:  "org.wikimedia.wikipedia")
    [latest_alpha_build_number.to_i, latest_beta_build_number.to_i].max
  end

  desc "updates version, builds, and pushes to TestFlight"
  lane :push do |options|
    build_dir = "build"
    product_name = options[:product_name] || "Wikipedia"
    hockey_app_id = options[:hockey_app_id] || "5d80da08a6761e5c6456736af7ebad88"
    app_identifier = options[:app_identifier] || "org.wikimedia.wikipedia"
    ipa_path = "#{build_dir}/#{product_name}.ipa"
    build_number =  options[:build] || get_latest_alpha_or_beta_build_number + 1
    version = get_version_number
    tag_prefix = options[:tag_prefix]

    increment_build_number(
      build_number: build_number
    )
    
    changelog_from_git_commits(
      pretty: '- (%ae) %s', # Optional, lets you provide a custom format to apply to each commit when generating the changelog text
      tag_match_pattern: "#{tag_prefix}/*", # Optional, lets you search for a tag name that matches a glob(7) pattern
      include_merges: false # Optional, lets you filter out merge commits
    )

    build(
      product_name: product_name,
      project: "Wikipedia"
    )

    pilot(
      ipa: ipa_path,
      skip_waiting_for_build_processing: false,
      skip_submission: true,
      distribute_external: false,
      app_identifier:  app_identifier,
      beta_app_feedback_email: "mobile-ios-wikipedia@wikimedia.org"
    )
    
    tag(
      prefix: tag_prefix,
      build_number: build_number
    )
    
    dsyms(
      app_identifier: app_identifier,
      version: version,
      build_number: build_number,
      ipa_path: ipa_path,
      hockey_app_id: hockey_app_id
    )
  end

  desc "Runs tests, version, tag, and push to the beta branch"
  lane :test_and_push_beta do

    verify_test_platforms
    push_beta

  end

  desc "Runs tests, version, tag, and push to the beta branch"
  lane :submit_release do
    build = ENV['BUILD']
    raise "Must specifiy a BUILD." unless build.length > 0
    
    build_dir = "build"
    product_name = "Wikipedia"
    ipa_path = "#{build_dir}/#{product_name}.ipa"
    
    sh "git pull"
    sh "git checkout betas/#{sha}"

    app_review_information(
      first_name: "Corey",
      last_name: "Floyd",
      phone_number: "+43 123123123",
      email_address: "github@krausefx.com",
      demo_user: "demoUser",
      demo_password: "demoPass",
      notes: "such notes, very text"
    )

    deliver(
      ipa: ipa_path,
      submit_for_review: true,
      automatic_release: false,
      build_number:build.to_i,
    )

    tag_release
  end
  
  
    # This lane requires HOCKEY_PRODUCTION environment variable to be set or a hockey_api_token param
    # 0. bundle exec fastlane push_beta hockey_api_token:THE_API_KEY
    # 1. HOCKEY_PRODUCTION=THE_API_KEY bundle exec fastlane push_beta
    # 2. Use a .env file
  desc "Download dSYMs from iTunes Connect and upload them to HockeyApp"
  lane :dsyms do |options|
    app_identifier = options[:app_identifier]
    version = options[:version]
    build_number = options[:build_number]  || latest_testflight_build_number(app_identifier: app_identifier)
    hockey_app_id = options[:hockey_app_id]
    hockey_api_token = options[:hockey_api_token] || ENV["HOCKEY_PRODUCTION"]
    ipa_path = options[:ipa_path]
    
    raise "Missing parameters" unless app_identifier && version && build_number && hockey_app_id && ipa_path && hockey_api_token
    
    download_dsyms(
      build_number: build_number.to_s,
      version: version.to_s,
      app_identifier: app_identifier
    ) # Download dSYM files from iTC

    hockey(
      public_identifier: hockey_app_id,
      api_token: hockey_api_token,
      notify: '0', # Means do not notify
      status: '1', # Means do not make available for download
      dsym: "#{app_identifier}-#{version}-#{build_number}.dSYM.zip",
      ipa: ipa_path
    )
    clean_build_artifacts
  end
  
  lane :dsyms_alpha do |options|
    app_identifier = "org.wikimedia.wikipedia.tfalpha"
    hockey_app_id = "2295c3698bbd0b050f257772dd2bdbb2"
    ipa_path = "build/Wikipedia Alpha.ipa"
    version = options[:version] || get_version_number
    dsyms(
      app_identifier: app_identifier,
      version: version,
      build_number: options[:build_number],
      hockey_app_id: hockey_app_id,
      ipa_path: ipa_path
    )
  end
  
  lane :dsyms_beta do |options|
    app_identifier = "org.wikimedia.wikipedia"
    hockey_app_id = "5d80da08a6761e5c6456736af7ebad88"
    ipa_path = "build/Wikipedia.ipa"
    version = options[:version] || get_version_number
    dsyms(
      app_identifier: app_identifier,
      version: version,
      build_number: options[:build_number] || options[:build],
      hockey_app_id: hockey_app_id,
      ipa_path: ipa_path
    )
  end
  
  lane :dsyms_beta_app do |options|
    app_identifier = "org.wikimedia.wikipedia.tfbeta"
    hockey_app_id = "c7ab1c41a3eb4b7581a0057624730467"
    ipa_path = "build/Wikipedia.ipa"
    version = options[:version] || get_version_number
    dsyms(
      app_identifier: app_identifier,
      version: version,
      build_number: options[:build_number] || options[:build],
      hockey_app_id: hockey_app_id,
      ipa_path: ipa_path
    )
  end
  
end
